server.port=4000
spring.profiles.active=production
am.admin.api.endpoint=http://localhost:8001

# The below values are a mapping of the URL path defined under Kong API's list
# Below is an example of Kong API defined in https://github.com/project-sunbird/sunbird-devops/blob/master/ansible/roles/kong-api/defaults/main.yml
#   - name: registerMobileDevicev2
#     uris: "{{ api_manager_perfix }}/v2/consumer/mobile_device/credential/register"
#     upstream_url: "{{ am_util_url }}/v2/consumer/mobile_device/credential/register"
am.admin.api.keys=mobile_device,desktop_device,portal_anonymous,portal_loggedin,access

# The private key names can be overridden if required by using the keyprefix property
# These private key names are essentially consumers in kong db
# The KID value is stamped to the token based on the key used
# The KID value is read and matched against a consumer by kong

# This property is used by the mobile device tokens
#am.admin.api.mobile_device.basepath=/tmp/
am.admin.api.mobile_device.basepath=/keys/
am.admin.api.mobile_device.keyprefix=mobile_device
am.admin.api.mobile_device.keystart=0
am.admin.api.mobile_device.keycount=0

# This property is used by the desktop device tokens
#am.admin.api.desktop_device.basepath=/tmp/
am.admin.api.desktop_device.basepath=/keys/
am.admin.api.desktop_device.keyprefix=desktop_device
am.admin.api.desktop_device.keystart=0
am.admin.api.desktop_device.keycount=0

# This property is used by the portal anonymous user tokens
#am.admin.api.portal_anonymous.basepath=/tmp/
am.admin.api.portal_anonymous.basepath=/keys/
am.admin.api.portal_anonymous.keyprefix=portal_anonymous
am.admin.api.portal_anonymous.keystart=0
am.admin.api.portal_anonymous.keycount=0

# This property is used by the portal logged in user tokens
#am.admin.api.portal_loggedin.basepath=/tmp/
am.admin.api.portal_loggedin.basepath=/keys/
am.admin.api.portal_loggedin.keyprefix=portal_loggedin
am.admin.api.portal_loggedin.keystart=0
am.admin.api.portal_loggedin.keycount=0

# This property is used by the managed user profile workflow and keycloak access token generation flow
#am.admin.api.access.basepath=/tmp/
am.admin.api.access.basepath=/keys/
am.admin.api.access.keyprefix=access
am.admin.api.access.keystart=0
am.admin.api.access.keycount=0

endpoints.health.id=apihealth
endpoints.health.sensitive=false

endpoints.metrics.id=metrics
endpoints.metrics.sensitive=false

# These define the domain, public key, secret key and KID value of Keycloak token along with the validity of access and refresh tokens
# Using the below values, the keycloak refresh token is validated and a new access token is issued using one of the access keys
# As of now, the same refresh token is sent back to client and only access token is generated and signed by this service
#refresh.token.public.basepath=/tmp/
refresh.token.public.basepath=/keys/
refresh.token.public.keyprefix=refresh_token_public_key
refresh.token.preload=false
refresh.token.kid=KID_VALUE
refresh.token.secret.key=SECRET_KEY_VALUE
refresh.token.domain=https://example.org/auth/realms/sunbird
access.token.validity=43200
refresh.token.offline.validity=2592000
refresh.token.log.older.than=30

#learner-service config
learner.base.api.url=http://localhost:9000
embed.role=true
learner.api.auth.key=bearerKey
